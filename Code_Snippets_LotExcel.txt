File    : Code_Snippets_LotExcel.txt
Fecha   : 16/10/2016 16:24:00
Objetivo: Reunir códigos de código Visual Basic del proyecto Lot_Excel

Indice:
    01.- Documentación del Código
         Comentarios del código para que sea más legible e interpretable
    02.- Control de Errores
         Rutinas de control y log de errores 
    03.- Formularios
         Rutinas de control y manejo de Objetos de formularios 
    04.- Mensajes y cajas de dialogo
         Ejemplos de cajas de control y dialogo
    05.- Validaciones
         Validaciones de tipos de campos y variables
    06.- HowTo
         Ejemplos de rutinas para realizar tareas y procesos tipo
    07.- Instrucciones mas comunes
         Patrones para bucles, evaluadores, colecciones
    08.- Manejo de Matrices
         Definición y uso de variables matriz
    09.- Manejo de cadenas de caracteres
    10.- Definición de Variables
	11.- Formatos
	12.- Lista de operadores por categorias
	13.- Funciones
	14.- Operaciones con rangos

    Obtener la hora actual:  ? format(Now(),"ddd, dd/MMM/yyyy hh:mm:ss",vbMonday)
	
    
01.- Documentación del Código
    
    a) Cabecera de Modulo
        ' *============================================================================*
        ' *
        ' *     Fichero    : <<nombre fichero>>.bas
        ' *
        ' *     Autor      : Carlos Almela Baeza
        ' *     Creación   : ddd, dd/MMM/yyyy hh:mm:ss
        ' *     Versión    : 1.0
        ' *     Propósito  : 
        ' *
        ' *============================================================================*
        Option Explicit
        Option Base 0
    
    
    b) Cabecera de Clase
        ' *============================================================================*
        ' *
        ' *     Fichero    : <<nombre fichero>>.cls
        ' *
        ' *     Autor      : Carlos Almela Baeza
        ' *     Creación   : ddd, dd/MMM/yyyy hh:mm:ss
		' *     Modificado : ddd, dd/MMM/yyyy hh:mm:ss
        ' *     Versión    : 1.0
        ' *     Propósito  : 
        ' *
        ' *============================================================================*
        Option Explicit
        Option Base 0
    
    d) Informacion Propiedad, Funcion, Procedimiento
        '------------------------------------------------------------------------------*
        ' Procedimiento  : <<nombre Procedimiento>>
        ' Fecha          : dd/MMM/yyyy
        ' Propósito      :
        ' Parámetros     :
        '------------------------------------------------------------------------------*
        '
        '------------------------------------------------------------------------------*
        ' Función        : <<nombre Función>>
        ' Fecha          : dd/MMM/yyyy
        ' Propósito      :
        ' Parámetros     :
        ' Retorno        : 
        '------------------------------------------------------------------------------*
        '
        '
        '------------------------------------------------------------------------------*
        ' Propiedad      : <<nombre Propiedad>>
        ' Fecha          : dd/MMM/yyyy
        ' Propósito      :
        '------------------------------------------------------------------------------*
        '
    e) pie del fichero  
        ' *===========(EOF): <<nombre fichero>>
    f) secciones
        '
        '--- Variables Privadas -------------------------------------------------------*            
        '--- Constantes ---------------------------------------------------------------*
        '--- Mensajes -----------------------------------------------------------------*
        '--- Errores ------------------------------------------------------------------*
        '--- Propiedades --------------------------------------------------------------*
        '--- Métodos Privados ---------------------------------------------------------*
        '--- Métodos Públicos ---------------------------------------------------------*

    g) Clase completa
        ' *============================================================================*
        ' *
        ' *     Fichero    : <<nombre fichero>>.cls
        ' *
        ' *     Autor      : Carlos Almela Baeza
		' *     Creación   : ddd, dd/MMM/yyyy hh:mm:ss
		' *     Modificado : ddd, dd/MMM/yyyy hh:mm:ss
        ' *     Versión    : 1.0
        ' *     Propósito  :
        ' *
        ' *============================================================================*
        Option Explicit
        Option Base 0
        '
        '--- Variables Privadas -------------------------------------------------------*
        '--- Constantes ---------------------------------------------------------------*
        '--- Mensajes -----------------------------------------------------------------*
        '--- Errores ------------------------------------------------------------------*
        '--- Propiedades --------------------------------------------------------------*
        '--- Métodos Privados ---------------------------------------------------------*
        Private Sub Class_Initialize()

        End Sub

        Private Sub Class_Terminate()

        End Sub
        '--- Métodos Públicos ---------------------------------------------------------*
        '------------------------------------------------------------------------------*
        ' Procedimiento  : <<nombre propiedad>>
        ' Fecha          : dd/MMM/yyyy
        ' Propósito      :
        ' Parámetros     :
        '------------------------------------------------------------------------------*
        '
		' *===========(EOF): <<nombre fichero>>.cls
        
02.- Control de Errores
    '
    '   Definición de errores
    '
    Public Const OBP<<clase>>ErrorBase = nn00
    Public Const ERR_<<clase>>INVALIDDIRTY = (OBP<<clase>>ErrorBase + 1)
    Public Const ERR_<<clase>>INVALIDCHECKCLASSSTORAGE = (OBP<<clase>>ErrorBase + 2)
    Public Const ERR_<<clase>>INVALIDNEW = (OBP<<clase>>ErrorBase + 3)
    '
    '  Mensajes
    '
    Public Const MSG_<<clase>>INVALIDDIRTY = "Invalid Data Type Expected Boolean."
    Public Const MSG_<<clase>>INVALIDCHECKCLASSSTORAGE = "Invalid Data Type Expected Boolean."
    Public Const MSG_<<clase>>INVALIDNEW = "Invalid Data Type Expected Boolean."

    '
    '   Constantes
    '
    Public Const ERR_TODO = 999
    Public Const MSG_TODO = "Rutina pendiente de codificar."

    '
    ' ErrorHandling
    '
    Public [Type_Parrafo] PARRAFO
      On Error GoTo PARRAFO_Error
        '
        '  
        Err.Raise ERR_TODO, "File.PARRAFO", MSG_TODO
        '       
      On Error GoTo 0
    PARRAFO__CleanExit:
        Exit [Type_Parrafo]
            
    PARRAFO_Error:
        Dim ErrNumber As Long: Dim ErrDescription As String: Dim ErrSource As String
        ErrNumber = Err.Number: ErrDescription = Err.Description: ErrSource = Err.Source
        '   Audita el error
        Call HandleException(ErrNumber, ErrDescription, "File.PARRAFO", ErrSource)
        '   Lanza el Error
        Err.Raise ErrNumber, "File.PARRAFO", ErrDescription
        '   Informa del error
        Call MsgBox(ErrDescription, vbCritical Or vbSystemModal, ThisWorkbook.Name)
        Call Trace("CERRAR")
    End [Type_Parrafo]
    
	Sentencias On Error 
		Puedes usar la sentencia "On Error" para especificar que pasa cuando ocurre un error:
			On Error Resume Next - devuelve el control a la siguiente sentencia en la que sucedio el error		  
			On Error Resume LineLabel - Devuelve el control a la linea especificada en la etiqueta
			On Error Resume [0] - Devuelve el control a la sentencia en la que se ha producido el error (la sentencia se re-ejecuta)
			On Error Goto LineLabel - La ejecución salta a la linea de la etiqueta cuando el error ocurre
			On Error Goto 0 - Resetea el objeto Err y resetea el Err.Number a cero.
	Resume
		The Resume statement can be used to resume execution after an error handling routine has finished.
		If the error occurred in the same procedure as the error handler, execution resumes with the statement that caused the error.
		If the error occurred in a called procedure, execution resumes at the statement that last called out of the procedure containing the error handling routine.
	Resume Next
		Be careful when using the "On Error Resume Next". This will sometimes ignore errors that shouldn't be ignored.
		Specifies that if a run-time error occurs in the line immediately following this statement, then execution continues to the next line.
		This causes execution to continue with the statement immediately following the statement that caused the run-time error or with the statement immediately following the most recent call out of the procedure containing the On Error Resume Next statement.
		
	Changing at RunTime (Access only)
		The error trapping option can be viewed and modified using the Application.GetOption and Application.SetOption methods

		Application.SetOption("Error Trapping", 2) 
		Debug.Print Application.GetOption("Error Trapping") 

	Err Object
		You can use the Err object to obtain information about the error.
		The Err object contains information about any run-time errors.
		When a run time error occurs, the properties of the Err object are filled with information that uniquely identifies the error and contains information that can be used to handle the error.
		Error handling relies on the value in the Number property of the Err object to determine the cause of the error.


		Property		Description
		Number			The error number. If this is zero then no error has occurred.
		Description		A short description of the error
		Source			The project name from the Properties dialog box.
		HelpContext		The context ID for a particular error in a help file.
		HelpFile		A folder location and filename of the help file.
		LastDllError	A system error code produced by a call to a DLL or external library (ie an APi call)

	
03.- Formularios
    ' 
    '  Manejo de controles de formularios
    '
        Los controles de formularios son:
            1.- Etiquetas
            2.- Cajas de texto
            3.- Listas desplegables
            4.- Listas Multicolumna
            5.- Casilla (CheckBox)
            6.- Botón de Opción (OptionBox)
            7.- Botón Alternar
            8.- Marco
            9.- Boton de comando
            10.- Barra de tabulaciones
            11.- Página Multiple
            12.- Barra de desplazamiento
            13.- Botón de número
            14.- Imagen
            15.- RefEdit
            
    3.1. Etiquetas
        '
        ' Definición 
        Dim const mLitBaseDatosVacia as string = "Base de datos vacia."
        Dim const mLitBaseDatosConDatos as string = "Se han encontrado $0 registros."
        '
        '
        If mReg = 0 Then
            Me.lblMensaje = mLitBaseDatosVacia
        Else
            Me.lblMensaje = Replace(mLitBaseDatosConDatos, "$0", Format(mReg, "#,##0"))
        End If
        
    3.2. Cajas de texto
        En función del tipo de dato que tengamos en la Caja de Texto podemos utilizar varias rutinas de control y edición.
        '
        '   Tipos de datos: Texto libre, Texto limitado, Numero entero, Numero decimal, Fechas, Porcentaje
        '
		'
		Inicialización de la caja de texto
			Me.txtTextoLibre.Text = "Texto libre"				' Texto Libre
			Me.txtFecha.Text = Format(mFecha, "dd/MM/yyyy")	    ' Fechas  
			Me.txtNumero.Text = Format(mNumero, "##,##0") 		' Numero Entero
			Me.txtDecimal.Text = Format(mDecimal,"###0.00") 	' Numero Decimal
			Me.txtPorcent.Text = Format(mPorcent, "0.00%") 		' Porcentaje
		
		Verificación del tipo de contenido
		' Texto
			If len(txtTextoLibre.Text) = 0 Then 
				MsgBox "Elemento vacío, es obligatorio completar"
			End If
			
		' Fecha u Hora
			If Not IsDate(txtFecha.Text) Then 
				MsgBox "Es necesaria una fecha válida."
			End If
			
		' Importe, Numero  o Porcentaje
			If Not IsNumeric(txtNumero.Text) Then
				MsgBox "Es necesario un importe válido."	
			End IF
		
    3.3. Listas desplegables
        '
        '   Carga de elementos de una lista a partir de una matriz
        '
        Const CONSTANTE_NOMBRES = "Elemento01;Elemento02;Elemento03"
        Dim ELEMENTOS as Variant
        Dim i         as Integer       
        '
        ELEMENTOS = Split ( CONSTANTE_NOMBRES, ";")
        For i = 0 to Ubound(ELEMENTOS)
            ListBox.AddItem ELEMENTOS(i)
        Next i
        ListBox.ListIndex = -1  ' No se selecciona ningún elemento
        '
        '   Evento al seleccionar el elemento   
        '
        Private Sub ListBox_Click()
            ELEMENTO_SELECCIONADO = ListBox.Value
        End Sub

        
    3.4.- Lista Multicolumna
		* Inicializacion del Control
				TODO: Definición y eventos.
			Las listas multicolumna pueden tener una acción de selección múltiple con una checkbox, 
			para ello seleccionaremos el modo de la  propiedad 
			Atributos de la lista multicolumna: 
				* ColumnHeads = False
				* ColumnWidths = "15;40"
				* MultiSelect = fmMultiSelectMulti
				* BoundColumn = 1  ' Id
				* List 
				* ListCount
				* ListIndex
				* ListStyle = fmListStyleOption
				* 
			
				
				+------+------+-----------+     HeadColumn = true   ' 
				+------+------+-----------+
				| [ ]  xx     xxxxxxxxxxx |  
				| [ ]  xx     xxxxxxxxxxx |
				| [ ]  xx     xxxxxxxxxxx |
				| [ ]  xx     xxxxxxxxxxx |
				| [ ]  xx     xxxxxxxxxxx |
				| [ ]  xx     xxxxxxxxxxx |
				+------+------+-----------+
			
			ListBox1.
			
			
			Eventos Click
		
		* Carga de una lista de selección:
		* Eventos del control 
		* Utilización del control
		
    3.5.- Casilla (CheckBox)
		* Inicialización del control
				
			chkBox.Value = true		' La asignación dispara el evento Click
						
		* Eventos y utilización del control
			
			Private Sub chkBox_Click()
				If chkBox.Value Then 
					chkBox.Caption = "Verdadero"		
				Else
					chkBox.Caption = "Falso"		
				End If
			End Sub 
		
    3.6.- Botón de Opción (OptionBox)		
    3.7.- Botón Alternar
    3.8.- Marco
    3.9.- Boton de comando
    3.10.- Barra de tabulaciones
    3.11.- Página Multiple
    3.12.- Barra de desplazamiento
    3.13.- Botón de número
    3.14.- Imagen
    3.15.- RefEditCheck Box
    
04.- Mensajes y cajas de dialogo
    Para enviar un mensaje al usuario se utiliza la instrucción MsgBox
    
        MsgBox(prompt[, buttons][, title][, helpfile, context])
    
        MsgBox("Mensaje al Operador", VbOKOnly + VbExclamation, "Título del mensaje")
        
    Esta función puede devolver un resultado tratada como pregunta:
        vbOK        1 Aceptar 
        vbCancel    2 Cancelar 
        vbAbort     3 Anular 
        vbRetry     4 Reintentar 
        vbIgnore    5 Ignorar 
        vbYes       6 Sí 
        vbNo        7 No 
        
05.- Validaciones
    
    Private Function IsValid() As Boolean
        Dim m_bError As Boolean                 'Variable de control de al menos un error
        m_bError = True                         'No existen errores por defecto 
        m_sMensaje = ""
        '
        '       Validacion de campo obligatorio
        '
        If (Len(txtTexto.Text) = 0) Then
            m_sMensaje = m_sMensaje & MSG_NOTEXTO
            m_bError = False
        End If
        '
        '       Validación de campo no numérico
        '    
        If (Len(txtNumero.Text) > 0) and (not IsNumeric(txtNumero.Text)) Then
            m_sMensaje = m_sMensaje & MSG_NONUMERO
            m_bError = False
        End If
        '
        '       Validación de Campo no fecha
        '
        If (Len(txtFecha.Text) = 0) and (not IsDate(txtFecha.Text) Then 
            m_sMensaje = m_sMensaje & MSG_NODATE
            m_bError = False
        End If
        '
        '       Validación de combo no seleccionado 
        '
        If (cboControl.ListIndex = -1 ) Then    
            m_sMensaje = m_sMensaje & MSG_NOCOMBO
            m_bError = False
        End If
        '
        '   
        '
        If (Not m_bError) Then
            m_sMensaje = MSG_HAYERROR & m_sMensaje
        End If
        IsValid = m_bError
    End Function
    
    
    '
    '   Otro ejemplo de validación múltiple con dos rutinas: una para control y otra para mensajes
    '---------------------------------------------------------------------------------------------
    '
    '   Se definen códigos de errores para las validaciones (potencias del numero 2)
    '
    Private mErrorValidacion                    As Long       ' Control de errores de validación
    Private Const ERR_CAMPOOBLIGATORIO          As Long = 1
    Private Const ERR_CAMPONONUMERICO           As Long = 2
    Private Const ERR_FECHANOVALIDA             As Long = 4
    Private Const ERR_DATONOSELECCIONADO        As Long = 8
    '
    '   y los mensajes de las validaciones
    '
    Private Const MSG_ERRORESVALIDACION         As String = "Los datos del formulario no cumplen las siguientes validaciones:" & vbCrLf
    Private Const MSG_CAMPOOBLIGATORIO          As String = "* El campo xxxx es un campo obligatorio."
    Private Const MSG_CAMPONONUMERICO           As String = "* Debe introducir un dato numérico."
    Private Const MSG_FECHANOVALIDA             As String = "* La fecha no es una fecha válida."
    Private Const MSG_DATONOSELECCIONADO        As String = "* No se ha seleccionado ningún elemento."
    '
    '   Función de validación
    '   
    Private Function IsValid() As Boolean
        '
        '   Inicializamos variables de control
        '
         mErrorValidacion = 0
        '
        '       Validación de campo obligatorio
        '
        If (Len(txtTexto.Text) = 0) Then
            mErrorValidacion = mErrorValidacion + ERR_CAMPOOBLIGATORIO
        End If
        '
        '       Validación de campo no numérico
        '    
        If (Len(txtNumero.Text) > 0) and (not IsNumeric(txtNumero.Text)) Then
            mErrorValidacion = mErrorValidacion + ERR_CAMPONONUMERICO
        End If
        '
        '       Validación de Campo no fecha
        '
        If (Len(txtFecha.Text) = 0) and (not IsDate(txtFecha.Text) Then 
            mErrorValidacion = mErrorValidacion + ERR_FECHANOVALIDA
        End If
        '
        '       Validación de combo no seleccionado 
        '
        If (cboControl.ListIndex = -1 ) Then    
            mErrorValidacion = mErrorValidacion + ERR_DATONOSELECCIONADO
        End If
        '
        '
        '   Evaluamos el código de error
        '
        If mErrorValidacion = 0 Then
            IsValid = True
        Else
            IsValid = False
        End If
    End Function
    '
    '   Edición del mensaje de error
    '
    Private Function MensajeValidacion() As String
        Dim sResult             As String
        '
        '   Si no hay error inicializamos el mensaje
        '
        If mErrorValidacion = 0 Then
            sResult = ""
        Else
            '
            '   Si hay algún error inicializamos la cabecera del error
            '
            sResult = MSG_ERRORESVALIDACION
        End If
    
        If (mErrorValidacion And ERR_CAMPOOBLIGATORIO) Then
            sResult = sResult & vbTab & MSG_ERRORESVALIDACION & vbCrLf
        End If
            
        If (mErrorValidacion And ERR_CAMPONONUMERICO) Then
            sResult = sResult & vbTab & MSG_CAMPONONUMERICO & vbCrLf
        End If
        
        If (mErrorValidacion And ERR_FECHANOVALIDA) Then
            sResult = sResult & vbTab & MSG_FECHANOVALIDA & vbCrLf
        End If
        
        If (mErrorValidacion And ERR_DATONOSELECCIONADO) Then
            sResult = sResult & vbTab & MSG_DATONOSELECCIONADO & vbCrLf
        End If      
        '
        '   Devolvemos el mensaje
        '
        MensajeValidacion = sResult
    End Function
    
    
06.- Howto
    * Manejo y edición de Celdas
    * Tratamiento de desplazacimentos dentro de un rango
    * Propiedades de la celda: Bordes, Letra,  Colores y formatos
	* Propiedades de estylo de los controles
    
07.- Instrucciones más comunes.
    7.1 Instrucciones condicionales
        Elegir la instrucción condicional a utilizar
        If...Then...Else: Salto a una instrucción cuando una condición es True o False
            If Variable > 0 then 
                <instrucciones True>
            Else
                <Intrucciones False>
            End if
        
        
        Select Case: Selección de la instrucción a ejecutar en función de un conjunto de condiciones 
        
            Function Bonificación(rendimiento, salario)
                Select Case rendimiento
                    Case 1
                        Bonificación = salario * 0.1
                    Case 2, 3
                        Bonificación = salario * 0.09
                    Case 4 To 6
                        Bonificación = salario * 0.07
                    Case Is > 8
                        Bonificación = 100
                    Case Else
                        Bonificación = 0
                End Select
            End Function



    
    7.2 Bucles  e Iteraciones
        Do...Loop: Seguir en el bucle mientras o hasta una condición sea True.
        For...Next: Utilizar un contador para ejecutar las instrucciones un número determinado de veces.
        For Each...Next: Repetición del grupo de instrucciones para cada uno de los objetos de una colección.
        
        '
        '   Bucle For con contadores
        '
        Dim Palabras, Caracteres, MiCadena
        For Palabras = 10 To 1 Step -1              ' Establece 10 repeticiones.
            For Caracteres = 0 To 9                 ' Establece 10 repeticiones.
                MiCadena = MiCadena & Caracteres    ' Agrega un número a la cadena.
            Next Caracteres                         ' Incrementa el contador
            MiCadena = MiCadena & " "               ' Agrega un espacio.
        Next Palabras

        '
        '   Bucle For con Colecciones de objetos
        '
        Dim Found, MiObjeto, MiColección
        Found = False                               ' Inicializa variable.
        For Each MiObjeto In MiColección            ' Itera por cada elemento. 
            If MiObjeto.Text = "Hola" Then          ' Si Texto es igual "Hola".
                Found = True                        ' Establece como Verdadero.
                Exit For                            ' Sale del bucle.
            End If
        Next
        '
        '   Bucle condicional 
        '
        Dim Contador
        Contador = 0                    ' Inicializa la variable.
        While Contador < 20             ' Comprueba el valor del Contador.
            Contador = Contador + 1     ' Incrementa Contador.
        Wend                            ' Finaliza el bucle End While cuando Contador > 19.
        Debug.Print Contador            ' Imprime 20 la ventana Inmediato
        '
        '   Bucle Do    
        '
        Dim Comprobar, Contador
        Comprobar = True: Contador = 0      ' Inicializa variables.
        Do                                  ' Bucle externo.
            Do While Contador < 20          ' Bucle interno.
                Contador = Contador + 1     ' Incrementa el contador.
                If Contador = 10 Then       ' Si la condición es verdadera.
                    Comprobar = False       ' Establece el valor a False.
                    Exit Do                 ' Sale del bucle interno.
                End If
            Loop
        Loop Until Comprobar = False        ' Sale inmediatamente del bucle externo.
    
    7.3 Devolver cadenas desde funciones
        Chr$                                  ChrB$ 
        Command$                              Right$ 
        CurDir$                               RightB$ 
        Date$                                 RTrim$ 
        Dir$                                  Space$ 
        Error$                                Str$ 
        Format$                               String$ 
        Hex$                                  Time$ 
        Input$                                Trim$ 
        InputB$                               Ucase$ 
        LCase$                                LTrim$ 
        Left$                                 Mid$ 
        LeftB$                                MidB$ 
        Oct$                     
    
    7.4 Escribir datos en archivos
            Cuando se trabaja con grandes cantidades de datos, es a menudo conveniente escribir o leer datos de un archivo. La instrucción Open permite crear y acceder a archivos directamente. Open proporciona tres tipos de acceso a archivos: 
            Acceso secuencial (modos Input, Output y Append) se utiliza para escribir archivos de texto, tales como registros de errores e informes.
            Acceso directo (modo Random) se utiliza para leer y escribir datos en un archivo sin cerrarlo. Los archivos de acceso directo conservan la información en registros, lo que permite recuperarla de forma rápida.
            Acceso binario (modo Binary) se utiliza para leer y escribir en cualquier byte de un archivo, sirve para almacenar o presentar una imagen de mapa de bits. 
            Nota    La instrucción Open no se debe utilizar para abrir archivos del mismo tipo que la aplicación. Por ejemplo, no use Open para abrir un documento de Word, unahoja de cálculo de Microsoft Excel o una base de datos de Microsoft Access. Si se hiciera, se perdería la integridad del archivo se corromperían los datos almacenados. 
            La siguiente tabla muestra las instrucciones normalmente utilizadas para escribir y leer datos en o de un archivo.
            
            Tipo de acceso              Escribir datos      Leer datos 
            Secuencial                  Print #,Write #     Input # 
            Directo                     Put                 Get 
            Binario                     Put                 Get 
            
            7.4.1 Tipos de accesos  
                - Secuencial
                - Directo
                - Binario
            7.4.1 Escribir datos 
            7.4.1 Leer datos
            
    7.5 Trabajo con colecciones
        - Declaración de un objeto Colección
            Dim X As New Collection
            '
            '
            '
            Dim X As Collection
            Set X = New  Collection
        
        - Agregar una clase a la colección
            
            object.Add item, key, before, after
            
            Part____	Descripción___________________
            object      Necesario. Una expresión de objeto que se evalúa como un objeto en la lista se aplica a .
            item        Necesario. Una expresión de cualquier tipo que especifica el miembro que se debe agregar a la colección.
            Key         Opcional. Una expresión de cadena exclusiva que especifica una cadena clave que se puede usar, en lugar de un índice posicional, para obtener acceso a un miembro de la colección.
            before      Opcional. Una expresión que especifica una posición relativa en la colección. El miembro que se va a agregar se coloca en la colección antes del miembro identificado __ por el argumentoBefore. Si una expresión numérica, Before debe ser un número comprendido entre 1 y el valor de la propiedad Count de la colección. En expresiones de cadena, before debe corresponder a la clave que se especificó al agregar a la colección el miembro al que se hace referencia. Puede especificar una posición before o after, pero no ambas.
            after       Opcional. Una expresión que especifica una posición relativa en la colección. El miembro que se desea agregar se sitúa en la colección detrás del miembro que identifica el argumento after. En expresiones numéricas, after debe ser un número comprendido entre 1 y el valor de la propiedad Count de la colección. En expresiones de cadena, after debe corresponder a la clave que se especificó al agregar a la colección el miembro al que se hace referencia. Puede especificar una posición before o after, pero no ambas.          
            
            Dim mInteger as integer
            
            mInteger = 20
            
            X.Add item := mInteger, key := CStr(mInteger)
            
        - Evaluar el número de elementos de la colección
            Debug.print 'La colección tiene : ' &  x.Count 
            
        - Acceder a un elemento de la colección
            Syntax
                object.Item(index)
            Part                Descripción
            object              Necesario. Una expresión de objeto que se evalúa como un objeto en la lista se aplica a .
            index               Obligatorio. Una expresión que especifica la posición de un miembro de la colección. Si es una expresión numérica, index debe ser un número comprendido entre 1 y el valor de la propiedad Count de la colección. Si una expresión de cadena, index debe corresponder al argumento key especificado cuando se agregó a la colección el miembro al que se hace referencia.
            
            Observaciones

            Si el valor proporcionado como index no coincide con ningún miembro existente de la colección, se produce un error. El método Item es el método predeterminado para una colección. Por lo tanto, las siguientes líneas de código son equivalentes:
            
                    Print MyCollection(1)
                    Print MyCollection.Item(1)
        
        Ejemplo

            En este ejemplo, se usa el método Item para recuperar una referencia a un objeto de una colección. Si Birthdays se supone que es un objeto de colección , el código siguiente recupera de la colección las referencias a los objetos que representan el cumpleaños de Bill Soto y el cumpleaños de Adam Smith, usando las claves "SmithBill" y "SmithAdam" como Índice . argumentos.
            Tenga en cuenta que la primera llamada especifica explícitamente el método Item pero la segunda, no. Ambas llamadas funcionan porque el método Item es el valor predeterminado para un objeto Collection. Las referencias, asignadas a SmithBillBD y SmithAdamBD mediante Set, se pueden usar para tener acceso a las propiedades y a los métodos de los objetos especificados.
            Para ejecutar este código, cree la colección y rellénela con al menos los dos miembros a los que se hace referencia.
            VB

            Copiar
            Dim SmithBillBD As Object
            Dim SmithAdamBD As Object
            Dim Birthdays
            Set SmithBillBD = Birthdays.Item("SmithBill")
            Set SmithAdamBD = Birthdays("SmithAdam")

        - Eliminar elementos de la colección
            Sintaxis
                object.Remove(index)
                
            La sintaxis del método Remove tiene el siguiente calificador de objetos y parte:
        
            Part            Descripción
            object          Necesario. Una expresión de objeto que se evalúa como un objeto en la lista se aplica a .
            index           Obligatorio. Una expresión que especifica la posición de un miembro de la colección. Si es una expresión numérica, index debe ser un número comprendido entre 1 y el valor de la propiedad Count de la colección. Si una expresión de cadena, index debe corresponder al argumento key especificado cuando se agregó a la colección el miembro al que se hace referencia.
        
            Observaciones

            Si el valor proporcionado como index no coincide con un miembro existente de la colección, se produce un error.
            
            Ejemplo

            Este ejemplo ilustra el uso del método Remove para quitar objetos de un objeto Collection, MyClasses. Este código quita el objeto cuyo índice es 1 en cada iteración del bucle.
                Dim Num, MyClasses
                For Num = 1 To MyClasses.Count    
                    MyClasses.Remove 1    ' Remove the first object each time
                            ' through the loop until there are 
                            ' no objects left in the collection.
                Next Num
		
		Claves y valores
			Private Sub prueba()
				Dim col1 As New Collection
				Dim i As Variant
				
				col1.Add Array("first key", "first string"), "first key"
				col1.Add Array("second key", "second string"), "second key"
				col1.Add Array("third key", "third string"), "third key"
				
				For Each i In col1
				  Debug.Print i(1)
				Next
				
				For Each i In col1
				  Debug.Print i(0)
				Next
			End Sub



08.- Matrices
    8.1. Definición
        Podemos definir una matriz de dos formas: estatica o dinámica
        Estática:
            ' Formato estatico de dos dimensiones de 11 elementos
            Dim MiMatriz(10, 10) As Integer     
            ' Una matriz Integer utiliza 22 bytes (11 elementos * 2 bytes).
            ReDim MiMatrizInteger(10) As Integer

            ' Una matriz Double-precision utiliza 88 bytes (11 elementos * 8 bytes).
            ReDim MiMatrizDoble(10) As Double

            ' Una matriz Variant utiliza al menos 176 bytes (11 elementos * 16 bytes).
            ReDim MiMatrizVariant(10)

            ' La matriz Integer utiliza 100 * 100 * 2 bytes (20.000 bytes).
            ReDim MiMatrizInteger(99, 99) As Integer 

            ' La matriz Double-precision utiliza 100 * 100 * 8 bytes (80.000 bytes).
            ReDim MiMatrizDoble (99, 99) As Double 

            ' La matriz Variant utiliza al menos 160.000 bytes (100 * 100 * 16 bytes).
            ReDim MiMatrizVariant(99, 99)
        
        Dinámica:
            Dim MatrizSingle() As Single
        
            'La instrucción ReDim se puede utilizar en un procedimiento, 
            'dentro del alcance de la matriz, para cambiar el número de dimensiones, 
            'definir el número de elementos y para definir los límites superior 
            'e inferior para cada dimensión. Se puede usar la instrucción 
            'ReDim para modificar la matriz dinámica cuantas veces sea necesario. 
            'Sin embargo, cada vez que se hace, se pierden los valores almacenados
            'en la matriz. Se puede usar la instrucción ReDim Preserve para ampliar '
            'una matriz conservando los valores que contiene. 
            'Por ejemplo, la siguiente instrucción añade 10 nuevos elementos a 
            'la matriz MatrizVar sin perder los valores almacenados en los elementos originales.

            ReDim Preserve MatrizVar(UBound(MatrizVar) + 10)

    8.2 Utilización de variables matriz 
        Inicialización
                'Para dar valor a un elemento individual, es preciso 
                'especificar el índice del elemento. El siguiente 
                'ejemplo asigna un valor inicial de 20 a todos los
                'elementos de la matriz.

            Sub LlenarMatriz()
                Dim curGastos(364) As Currency
                Dim intI As Integer
                For intI = 0 to 364
                    curGastos(intI) = 20
                Next
            End Sub
        
        Cambiar el límite inferior 
            'Se puede usar la instrucción Option Base al principio de un 
            'módulo para cambiar el índice predefinido del primer elemento
            'del 0 al 1. En el siguiente ejemplo, la instrucción Option 
            'Base cambia el índice del primer elemento y la instrucción 
            'Dim declara la variable matriz curGastos con 365 elementos.

                Option Base 1
                Dim curGastos(365) As Currency

            'También se puede fijar de forma explícita el límite inferior 
            'de una matriz mediante el uso de la cláusula To tal y como 
            'muestra el siguiente ejemplo.

                Dim curGastos(1 To 365) As Currency
                Dim strDiaSemana(7 To 13) As String

        Almacenar valores Variant en matrices
            'Hay dos formas de crear matrices de valores Variant. 
            'Una forma consiste en declarar una matriz como del 
            'tipo de datos Variant, tal y como muestra el siguiente ejemplo:

                Dim varDatos(3) As Variant
                varDatos(0) = "Cristina Martínez"
                varDatos(1) = "C/ Don Ramón de la Cruz, 73"
                varDatos(2) = 38
                varDatos(3) = Format("06-09-1952", "Fecha general")

            'La otra forma consiste en asignar la matriz que devuelve la 
            'función Matriz a una variable Variant, tal y como muestra 
            'el siguiente ejemplo.

                Dim varDatos As Variant
                varDatos = Array("Cristina Martínez", "C/Don Ramón de la Cruz, 73", 38, _
                Format("06-09-1952", "Fecha general"))

            'Los elementos de una matriz de valores Variant se identifican 
            'mediante su índice, sea cual sea la técnica que se haya usado 
            'para crear la matriz. Por ejemplo, la siguiente instrucción 
            'podría añadirse a cualquiera de los ejemplos anteriores.

                MsgBox "Los datos de " & varDatos(0) & " se han guardado."

        Utilizar matrices con múltiples dimensiones
            'En Visual Basic se pueden declarar matrices con hasta 60 dimensiones. 
            'Por ejemplo, la siguiente instrucción declara una matriz de dos dimensiones, de 5 por 10.

                Dim sngMulti(1 To 5, 1 To 10) As Single

            'Si considera a la matriz como una tabla de dos entradas, el primer 
            'argumento representaría a las filas y el segundo a las columnas.

            'Utilice instrucciones For...Next para operar con matrices de dimensiones 
            'múltiples. El siguiente procedimiento llena una matriz bidimensional con valores Single.

                Sub LlenaMatrizMulti()
                    Dim intI As Integer, intJ As Integer
                    Dim sngMulti(1 To 5, 1 To 10) As Single
                    
                    ' Llena matriz con valores.
                    For intI = 1 To 5
                        For intJ = 1 To 10
                            sngMulti(intI, intJ) = intI * intJ
                            Debug.Print sngMulti(intI, intJ)
                        Next intJ
                    Next intI
                End Sub

    8.3 Funciones con Matrices  
        UBound: Devuelve un tipo Long que contiene el mayor subíndice disponible para la dimensión indicada de una matriz.
        Sintaxis: UBound(nombre_matriz[, dimensión])

            Dim Mayor
            Dim MiMatriz(1 To 10, 5 To 15, 10 To 20)    ' Declara las variables de matriz.
            Dim UnaMatriz(10)
            Mayor = UBound(MiMatriz, 1)    ' Devuelve 10.
            Mayor = UBound(MiMatriz, 3)    ' Devuelve 20.
            Mayor = UBound(UnaMatriz)    ' Devuelve 10.

        Option Base {0 | 1} : Se usa en el nivel de módulo para declarar el límite inferior predeterminado para subíndices de matriz.

            Option Base 1    ' Establece los subíndices de matriz predeterminados a 1.

            Dim Menor
            Dim MiMatriz(20), Matriz2D(3, 4)    ' Declara las variables de la matriz.
            Dim MatrizCero(0 To 5)    ' Elude el subíndice base predeterminado.
            ' Utilice la función LBound para determinar los límites inferiores de las matrices.
            Menor = LBound(MiMatriz)    ' Devuelve 1.
            Menor = LBound(Matriz2D, 2)    ' Devuelve 1.
            Menor = LBound(MatrizCero)    ' Devuelve 0
    
        LBound: Devuelve un tipo Long que contiene el subíndice más pequeño disponible para la dimensión indicada de una matriz.
        Sintaxis: LBound(nombre_matriz[, dimensión])
        ejemplo: Ver ejemplo anterior
        
        ReDim : Se utiliza en el nivel de procedimiento para reasignar espacio de almacenamiento para variables de matriz dinámica.
        Sintaxis :  ReDim [Preserve] nombre_variable(subíndices) [As tipo] [, nombre_variable(subíndices) [As tipo]] . . .
        Ejemplos:
            Dim MiMatriz() As Integer    ' Declara una matriz dinámica.
            Redim MiMatriz(5)            ' Asigna 5 elementos.
            For I = 1 To 5               ' Bucle 5 veces.
                MiMatriz(I) = I          ' Inicializa la matriz.
            Next I

        La instrucción siguiente cambia el tamaño de la matriz y borra los elementos.

            Redim MiMatriz(10)           ' Cambia el tamaño a 10 elementos.
            For I = 1 To 10              ' Bucle 10 veces.
                MiMatriz(I) = I          ' Inicializa la matriz.
            Next I

        La instrucción siguiente cambia el tamaño de la matriz pero no borra elementos.
            
            Redim Preserve MiMatriz(15)  ' Cambia el tamaño a 15 elementos.

09.- Manejo de cadenas de caracteres
        Definición 
            Dim mStr as String
        
        Funciones de manejo de cadenas
            * Len(string | varname)
            
            * InStr([ start ], string1, string2, [ compare ])
                Devuelve un valor Variant (Long) que especifica la posición de la primera 
                ocurrencia de una cadena dentro de otra.
                start:  Posición de inicio dentro de la cadena donde se empieza a buscar
                string1: Cadena en la que se realiza la busqueda
                string2: Cadena a buscar
                compare: La configuración del argumento compare es la siguiente: 
                Constante               Valor       Descripción
                vbUseCompareOption      -1          Realiza una comparación con la configuración 
                                                     de la instrucción Option Compare.
                vbBinaryCompare          0          Lleva a cabo una comparación binaria.
                vbTextCompare            1          Lleva a cabo una comparación textual.
                vbDatabaseCompare        2          Solo Microsoft Access. Realiza una comparación 
                                                    que se basa en la información de la base de datos.
                Ejemplo:
                    Dim SearchString, SearchChar, MyPos
                    SearchString ="XXpXXpXXPXXP"    ' String to search in.
                    SearchChar = "P"    ' Search for "P".
                    ' A textual comparison starting at position 4. Returns 6.
                    MyPos = Instr(4, SearchString, SearchChar, 1)    
                    ' A binary comparison starting at position 1. Returns 9.
                    MyPos = Instr(1, SearchString, SearchChar, 0)
                    ' Comparison is binary by default (last argument is omitted).
                    MyPos = Instr(SearchString, SearchChar)    ' Returns 9.
                    MyPos = Instr(1, SearchString, "W")    ' Returns 0.             
            
            * InstrRev(stringcheck, stringmatch, [ start, [ compare ]])
                Devuelve la posición de una ocurrencia de una cadena dentro de otra, desde el final de la cadena.
                stringcheck:    Obligatorio. Expresión de cadena en la que se busca.
                stringmatch:    Necesario. Expresión de cadena en la que se busca.
                start:          Opcional. Expresión numérica que define la posición inicial de cada búsqueda. Si se omite, se usa -1, lo que significa que la búsqueda comienza en la posición del último carácter. Si start contiene Null, se produce un error.
                compare         Opcional. Valor numérico que indica el tipo de comparación que se usa al evaluar subcadenas. Si se omite, se realiza una comparación binaria. Vea la sección Configuración para ver los valores.
            
            * LCase (cadena)
                Devuelve un valor de String que se ha convertido en minúsculas.
                Ejemplo:
                    Dim UpperCase, LowerCase
                    Uppercase = "Hello World 1234"    ' String to convert.
                    Lowercase = Lcase(UpperCase)      ' Returns "hello world 1234".
            * UCase (cadena)
            * Left(string, length)
            * Right(string, length)
            * LTrim, RTrim y Trim
            * Mid(string, start, [ length ])
            * Replace(expression, find, replace, [ start, [ count, [ compare ]]])
            * Space(número)
            * Split(expression, [ delimiter, [ limit, [ compare ]]])
            * Join(sourceArray, [ __ delimitador])
            * StrComp (cadena1, cadena2, [ comparar ])
            * StrConv(string, conversion, [ LCID ])
            * String(number, character)
            * StrReverse (expresión)
            * FormatCurrency(Expression, [ NumDigitsAfterDecimal, [ IncludeLeadingDigit, [ UseParensForNegativeNumbers, [ GroupDigits ]]]])
                Devuelve una expresión con formato de valor de moneda usando el símbolo de moneda definido en el panel de control del sistema.
                Part                            Descripción             
                Expression                      Obligatorio. Expresión a la que se va a aplicar formato.
                NumDigitsAfterDecimal           Opcional. Valor numérico que indica cuántas posiciones a la derecha del decimal se muestran. El valor predeterminado es-1, que indica que se usa la configuración regional del equipo.
                Argumentos includeleadingdigit  Opcional. Constante de tres estados que indica si se muestra o no un cero inicial para los valores de fracciones. Vea la sección Configuración de valores.
                UseParensForNegativeNumbers     Opcional. Constante de tres estados que indica si se colocan o no valores negativos entre paréntesis. Consulte los valores en la sección Configuración.
                GroupDigits                     Opcional. Constante TriState que indica si los números se agrupan mediante el delimitador de grupo especificado en la configuración regional del equipo. Vea la sección Configuración de valores.               
            * FormatDateTime(Date, [ NamedFormat ])
            * FormatNumber(Expression, [ NumDigitsAfterDecimal, [ IncludeLeadingDigit, [ UseParensForNegativeNumbers, [ GroupDigits ]]]])
            * FormatPercent(Expression, [ NumDigitsAfterDecimal, [ IncludeLeadingDigit, [ UseParensForNegativeNumbers, [ GroupDigits ]]]])

            

            
            
10.- Definición de Variables
	
	
	La Declaración de variables     Public, Dim, Private, VarType, Estructuras, Enum, Type
    
    
        Constante           Valor           Descripción
        vbEmpty             0               Sin inicializar (predeterminado).
        vbNull              1               Contiene datos no válidos.
        vbInteger           2               Integer
        vbLong              3               Entero largo.
        vbSingle            4               Número de punto flotante de precisión sencilla
        vbDouble            5               Número de punto flotante de doble precisión
        vbCurrency          6               Moneda
        vbDate              7               Fecha
        vbString            8               String
        vbObject            9               Objeto
        vbError             10              Error
        vbBoolean           11              Boolean
        vbVariant           12              Variante (solo para matrices de variantes).
        vbDataObject        13              Objetos de acceso a datos.
        vbDecimal           14              Decimal
        vbByte              432             Byte
        vbLongLong          20              Entero LongLong (válido solo en plataformas de 64 bits)
        vbUserDefinedType   36              Variantes que contienen tipos definidos por el usuario
        vbArray             8192            Matriz
    
    Enum
        Sintaxis
        [ Public | Private ] Enum NombreVariable
            memberName [= expresióndeconstante ] 
            memberName [= expresióndeconstante ] 
            ...
        End Enum
    

11.- Formatos 
		Dim MyTime, MyDate, MyStr
		MyTime = #17:04:23#
		MyDate = #January 27, 1993#

		' Returns current system time in the system-defined long time format.
		MyStr = Format(Time, "Long Time")

		' Returns current system date in the system-defined long date format.
		MyStr = Format(Date, "Long Date")

		MyStr = Format(MyTime, "h:m:s")    ' Returns "17:4:23".
		MyStr = Format(MyTime, "hh:mm:ss am/pm")    ' Returns "05:04:23 pm".
		MyStr = Format(MyTime, "hh:mm:ss AM/PM")    ' Returns "05:04:23 PM".
		MyStr = Format(MyDate, "dddd, mmm d yyyy")    ' Returns "Wednesday, Jan 27 1993".
		' If format is not supplied, a string is returned.
		MyStr = Format(23)    ' Returns "23".

		' User-defined formats.
		MyStr = Format(5459.4, "##,##0.00")    ' Returns "5,459.40".
		MyStr = Format(334.9, "###0.00")    ' Returns "334.90".
		MyStr = Format(5, "0.00%")    ' Returns "500.00%".
		MyStr = Format("HELLO", "<")    ' Returns "hello".
		MyStr = Format("This is it", ">")    ' Returns "THIS IS IT".

		Nombre de formato	Descripción
		-----------------	-----------------------------------------------------------------------
		"General Date"		Muestra una fecha y/o hora, por ejemplo, 4/3/93 05:34 P. M.. 
							Si no hay ninguna parte fraccionaria, muestra solo una fecha, 
							por ejemplo, 4/3/93. Si no hay parte entera, muestra solo la hora, 
							por ejemplo, 05:34 P. M.. La presentación de la fecha 
							depende de la configuración del sistema.
		"Long Date"			Muestra una fecha de acuerdo con el formato de fecha larga del sistema.
		"Medium Date"		Muestra una fecha con el formato de fecha mediana 
							apropiado para la versión del lenguaje de la aplicación host.
		"Short Date"		Muestra una fecha con el formato de fecha corta del sistema.
		"Long Time"			Muestra una hora con el formato de hora larga del sistema; 
							incluye horas, minutos, segundos.
		"Medium Time"		Muestra la hora con formato de 12 horas con horas y minutos, 
							y el designador AM/PM.
		"Short Time"		Muestra una hora con el formato de 24 horas, por ejemplo, 17:45.

		Nombre de formato	Descripción
		"General Number"	Muestra el número sin separador de miles.
		"Currency"			Muestra el número con el separador de miles, si corresponde; 
							muestra dos dígitos a la derecha del separador decimal. 
							El resultado depende de la configuración regional del sistema.
		"Fixed"				Muestra el menos un digito a la izquierda y dos dígitos a la 
							derecha del separador decimal.
		"Standard"			Muestra el número con el separador de miles, al menos un dígito 
							a la izquierda y dos dígitos a la derecha del separador decimal.
		"Percent"			Muestra un número multiplicado por 100 con un signo de porcentaje 
							(%) anexado a la derecha; siempre muestra dos dígitos a la derecha
							del separador decimal.
		"Scientific"		Usa la notación científica estándar.
		"Yes/No"			Muestra No si el número es 0; de lo contrario, muestra Yes.
		"True/False"		Muestra False si el número es 0; de lo contrario, muestra True.
		"On/Off"			Muestra Off si el número es 0; de lo contrario, muestra On.

		Carácter	Descripción
		--------	-----------------------------------------------------------------------
		@			Marcador de posición de carácter. Muestra un carácter o un espacio. 
					Si la cadena tiene un carácter en la posición en la que aparece la 
					almohadilla (@) en la cadena de formato, lo muestra; de lo contrario, 
					muestra un espacio en esa posición. Los marcadores de posición se 
					rellenan de derecha a izquierda, a menos que haya un carácter de 
					signo de exclamación (!) en la cadena de formato.
		&			Marcador de posición de carácter. Muestra un carácter o nada. 
					Si la cadena tiene un carácter en la posición en la que aparece la y 
					comercial (&), la muestra; en caso contrario, no muestra nada. Los 
					marcadores de posición se rellenan de derecha a izquierda, a menos 
					que haya un carácter de signo de exclamación (!) en la cadena de formato.
		<			Fuerza minúsculas. Muestra todos los caracteres en minúsculas.
		>			Fuerza mayúsculas. Muestra todos los caracteres en mayúsculas.
		!			Fuerza el relleno de marcadores de posición de izquierda a derecha. 
					El comportamiento predeterminado es rellenar los marcadores de 
					posición de derecha a izquierda.

		Carácter	Descripción
		--------	------------------------------------------------------------------------
		(:)			Separador de fecha. En algunas configuraciones regionales, pueden usarse 
					otros caracteres para representar el separador de hora. El separador de 
					hora separa horas, minutos y segundos cuando se da formato a valores de 
					hora. El carácter real utilizado como separador de hora en el resultado 
					con formato depende de la configuración del sistema.
		(/)			Separador de fecha. En algunas configuraciones regionales, pueden usarse 
					otros caracteres para representar el separador de fecha. El separador de 
					fecha separa el día, mes y año cuando se da formato a valores de fecha. 
					El carácter real utilizado como separador de fecha en el resultado con 
					formato depende de la configuración del sistema.
		c			Muestra la fecha como ddddd y muestra la hora como ttttt, en ese orden. 
					Muestra solo la información de fecha si no hay una parte fraccionaria en
					el número de serie de la fecha; se muestra solo la información de hora 
					si no hay una parte entera.
		d			Muestra el día como un número sin un cero inicial (131).
		dd			Muestra el día como un número con un cero inicial (0131).
		ddd			Muestra el día como una abreviatura (DomSáb). Localizada.
		dddd		Muestra el día como nombre completo (domingosábado). Localizada.
		ddddd		Muestra la fecha como fecha completa (incluido el día, el mes y el año) 
					con el formato de acuerdo a la configuración del formato de fecha corta 
					del sistema. El formato de fecha corta predeterminado es m/d/yy.
		dddddd		Muestra un número de serie de fecha como fecha completa (incluido el 
					día, el mes y el año) con formato de acuerdo a la configuración de 
					fecha larga que reconoce el sistema. El formato de fecha larga 
					predeterminado es mmmm dd, yyyy.
		w			Muestra el día de la semana como un número (1 para domingo 
					hasta 7 para sábado).
		ww			Muestra la semana del año como un número (154).
		m			Muestra el mes como un número sin un cero inicial (112). Si m va 
					inmediatamente después de h o hh, se muestra el minuto en lugar del mes.
		mm			Muestra el mes como un número con un cero inicial (0112). Si m va 
					inmediatamente después de h o hh, se muestra el minuto en lugar del mes.
		mmm			Muestra el mes como una abreviatura (EneDic). Localizada.
		mmmm		Muestra el mes como un nombre de mes completo (enerodiciembre). Localizada.
		q			Muestra el trimestre del año como un número (14).
		y			Muestra el día del año como un número (1366).
		yy			Muestra el año como un numero de 2 dígitos (0099).
		yyyy		Muestra el año como un numero de 4 dígitos (1009999).
		h			Muestra la hora como un número sin cero inicial (023).
		hh			Muestra la hora como un número con cero inicial (0023).
		n			Muestra el minuto como un número sin cero inicial (059).
		nn			Muestra el minuto como un número con cero inicial (0059).
		s			Muestra el segundo como un número sin cero inicial (059).
		ss			Muestra el segundo como un número con cero inicial (0059).
		ttttt		Muestra la hora como una hora completa (hora, minuto y segundo), usando el 
					separador de hora definido por el formato de hora reconocido por el sistema. 
					Se muestra un cero inicial si la opción de cero inicial está seleccionada y 
					la hora es anterior a las 10:00 A. M. o P. M. El formato de hora 
					predeterminado es h:mm:ss.
		AM/PM		Usa el reloj de 12 horas y muestra AM en mayúsculas con cualquier hora 
					antes del mediodía; muestra PM en mayúsculas con cualquier hora entre 
					el mediodía y las 11:59 P.M.
		am/pm		Usa el reloj de 12 horas y muestra AM en minúsculas con cualquier hora 
					antes del mediodía; muestra PM en minúsculas con cualquier hora entre 
					el mediodía y 11:59 P.M.
		A/P			Usa el reloj de 12 horas y muestra una A en mayúsculas con cualquier 
					hora antes del mediodía; muestra una P mayúscula con cualquier hora 
					entre el mediodía y las 11:59 P.M.
		a/p			Usa un reloj de 12 horas y muestra una A en minúsculas con cualquier 
					hora antes del mediodía; muestra una P en minúsculas con cualquier 
					hora entre el mediodía y las 11:59 P.M.
		AMPM		Utiliza el reloj de 12 horas y muestra el literal de cadena AM definida 
					por el sistema con las horas antes del mediodía, muestra el cadena PM definido 
					por el sistema con las horas entre el mediodía y las 11:59 P. M. AMPM puede 
					ser mayúscula o minúscula, pero el uso de mayúsculas o minúsculas 
					de la cadena mostrada coincide con el de la cadena definida por la 
					configuración del sistema. El formato predeterminado es AM/PM. Si el 
					sistema está establecido en el reloj de 24 horas, la cadena suele 
					establecerse en una cadena de longitud cero.

		Carácter____	Descripción
		Ninguno			Muestra el número sin formato.
		(0)				Marcador de posición de dígitos. Muestra un dígito o un cero. 
						Si la expresión tiene un dígito en la posición donde aparece 
						el 0 en la cadena de formato, lo muestra; en caso contrario, 
						muestra un cero en esa posición. Si el número tiene menos 
						dígitos que ceros (a ambos lados de la coma decimal) en la 
						expresión de formato, muestra ceros iniciales o finales. Si 
						el número tiene más dígitos a la derecha del separador decimal 
						que ceros a la derecha del separador decimal en la expresión de 
						formato, redondea el número a tantos decimales como el número de
						ceros. Si el número tiene más dígitos a la izquierda del 
						separador decimal que ceros a la izquierda del separador 
						decimal en la expresión de formato, muestra los dígitos 
						adicionales sin cambios.
		(#)				Marcador de posición de dígitos. Muestra un dígito o nada. 
						Si la expresión tiene un dígito en la posición en la que aparece 
						# en la cadena de formato, lo muestra; de lo contrario, 
						no muestra nada en esa posición. Este símbolo funciona como 
						un marcador de posición de dígito 0, excepto en que los ceros 
						iniciales y finales no se muestran si el número tiene los mismos 
						dígitos o menos dígitos que caracteres # hay en el lado del 
						separador decimal en la expresión de formato.
		(.)				Marcador de posición decimal. En algunas configuraciones 
						regionales, se usa una coma como separador decimal. El marcador 
						de posición decimal determina el número de dígitos que aparecen 
						a la izquierda y derecha del separador decimal. Si la expresión 
						de formato contiene solamente signos de número a la izquierda de 
						este símbolo, los números menores que 1 comienzan con un separador 
						decimal. Para mostrar un cero inicial con números fraccionarios,
						utilice 0 como primer marcador de posición de dígitos a la 
						izquierda del separador decimal. El carácter real utilizado 
						como marcador de posición de decimal en el resultado con formato 
						depende del formato de número reconocido por su sistema.
		(%)				Marcador de posición de porcentaje. Multiplica la expresión 
						por 100. El carácter de porcentaje (%) se inserta en la posición 
						en la que aparece en la cadena de formato.
		(,)				Separador de miles. En algunas configuraciones regionales, se 
						utiliza un punto como separador de miles. El separador de miles 
						separa los millares de las centenas en un número que tiene cuatro
						o más dígitos a la izquierda del separador decimal. El uso estándar
						del separador de miles se especifica si el formato contiene 
						un separador de miles rodeado de marcadores de posición de dígitos 
						(0 o #). Dos separadores de miles adyacentes o un separador de miles 
						inmediatamente a la izquierda del separador decimal (independientemente
						de si se especifica un valor decimal) significa "reducir el número 
						dividiéndolo por 1000, redondearlo según sea necesario." 
						Por ejemplo, puede usar la cadena de formato "##0,," para 
						representar 100 millones como 100. Los números menores que 
						1 millón se muestran como 0. Dos separadores de miles adyacentes 
						en cualquier posición que no sea inmediatamente a la izquierda 
						del separador decimal se consideran simplemente como una especificación 
						del uso de un separador de miles. El carácter real utilizado como 
						separador de miles en el resultado con formato depende del formato 
						de número reconocido por su sistema.
		(:)				Separador de fecha. En algunas configuraciones regionales, 
						se pueden usar otros caracteres para representar el separador de hora. 
						El separador de hora separa horas, minutos y segundos cuando se da 
						formato a valores de hora. El carácter real utilizado como separador 
						de hora en el resultado con formato depende de la configuración del sistema.
		(/)				Separador de fecha. En algunas configuraciones regionales, pueden 
						usarse otros caracteres para representar el separador de fecha. 
						El separador de fecha separa el día, mes y año cuando se da formato 
						a valores de fecha. El carácter real utilizado como separador de 
						echa en el resultado con formato depende de la configuración del sistema.
		(E- E+ e- e+)	Formato científico. Si la expresión de formato contiene al menos un 
						marcador de posición de dígitos (0 o #) a la derecha de E-, E+, e- o e+, 
						se muestra el número en formato científico y E o e se inserta entre el 
						número y su exponente. El número de marcadores de posición de dígitos a 
						la derecha determina el número de dígitos en el exponente. Use E- o e- 
						para colocar un signo menos junto a los exponentes negativos. Use E+ o e+ 
						para colocar un signo menos junto a los exponentes negativos y un signo 
						más junto a los positivos.
		- + $ ( )		Mostrar un carácter literal. Para mostrar un carácter distinto a los que 
						aparecen en la lista, ponga antes de él una barra inversa (\) o 
						póngalo entre comillas (" ").
		(\)				Muestra el siguiente carácter en la cadena de formato. Para mostrar 
						un carácter que tiene un significado especial como carácter literal, 
						coloque antes una barra diagonal inversa (\). La barra en sí no se 
						muestra. Usar una barra diagonal inversa es lo mismo que incluir el 
						siguiente carácter entre comillas dobles. 
						Para mostrar una barra diagonal inversa, use dos barras diagonales 
						inversas (\\). 	Ejemplos de caracteres que no se pueden mostrar como 
						caracteres literales son los caracteres de formato de fecha y de hora
						(a, c, d, h, m, n, p, q, s, t, w, y, / y :), los caracteres de formato 
						numérico (#, 0, %, E, e, coma y punto) y los caracteres de formato de 
						cadena (@, &, <, > y !).
		("ABC")			Muestra la cadena dentro de las comillas dobles (" "). Para incluir 
						una cadena en formato desde dentro del código, debe usar Chr(34) 
						para encerrar el texto (34 es el código de carácter para un signo 
						de comillas (")).

12.- Lista de operadores por categorias 
	Categorías de operadores
	Operadores										Descripción
	Operadores aritméticos							Estos operadores realizan cálculos matemáticos.
		Operador ^			number ^ exponent
		Operador *			number1 * number2 
		Operador /      	expression1 / expression2
		Operador </span> 	expression1 \ expression2  		Divide dos numeros y devuelve un entero
		Mod (operador)		result = number1 Mod number2  	Devuelve el resto de una división
		Operador+ (unario y binario)
		Operador- (unario y binario)

	Operadores de asignación						Estos operadores realizan operaciones de asignación.
		
	Operadores de comparación						Estos operadores realizan comparaciones.
	Operadores de concatenación						Estos operadores combinan cadenas.
	Operadores lógicos y operadores bit a bit		Estos operadores realizan operaciones lógicas.
	Operadores de desplazamiento de bits			Estos operadores realizan desplazamientos aritméticos en los patrones de bits.
	Operadores varios								Estos operadores realizan operaciones misceláneas.

	Operaciones matematicas y lógicas
		result = number1 Mod number2
		






		Tipos					Descripción												Operadores
		Operadores aritméticos	Operadores usados para realizar cálculos matemáticos.	*signo
																						^signo
																						/signo
																						\signo
																						Modsigno
																						+signo
																						-signo
		Operadores de comparación	Operadores usados para realizar comparaciones.	= signo
																					Is signo
																					Like signo
		Operadores de concatenación	Operadores usados para realizar concatenaciones.	& signo
																						+ signo
		Operadores lógicos	Operadores usados para realizar operaciones lógicas.	And signo
																					Eqv signo
																					Imp signo
																					Not signo
																					Or signo
																					Xor signo


13.- Funciones 
		Funciones de conversión
			Asc
			Chr
			CVErr
			Format
			Hexa
			Oct
			Str
			Val
		Funciones matemáticas
			Abs
			Atn
			Cos
			Derived math
			Exp
					Dim MyAngle, MyHSin
					' Define angle in radians.
					MyAngle = 1.3    
					' Calculate hyperbolic sine.
					MyHSin = (Exp(MyAngle) - Exp(-1 * MyAngle)) / 2  
			Int, Fix
					Dim MyNumber
					MyNumber = Int(99.8)    ' Returns 99.
					MyNumber = Fix(99.2)    ' Returns 99.

					MyNumber = Int(-99.8)    ' Returns -100.
					MyNumber = Fix(-99.8)    ' Returns -99.

					MyNumber = Int(-99.2)    ' Returns -100.
					MyNumber = Fix(-99.2)    ' Returns -99.
			Log
			Rnd
			Sgn
			Sin
			Sqr
			Tan
		Funciones de conversión de tipo
			Sintaxis
			CBool(expression)
			CByte(expression)
			CCur(expression)
			CDate(expression)
			CDbl(expression)
			CDec(expression)
			CInt(expression)
			CLng(expression)
			CLngLng(expression) (válida solo en plataformas de 64 bits).
			CLngPtr(expression)
			CSng(expression)
			CStr(expression)
			CVar(expression)
		Otras funciones
			Array
				Devuelve un tipo Variant que contiene una matriz.
				--
				Dim A As Variant, B As Long, i As Long
				A = Array(10, 20, 30)  ' A is a three element list by default indexed 0 to 2
				B = A(2)               ' B is now 30
				ReDim Preserve A(4)    ' Extend A's length to five elements
				A(4) = 40              ' Set the fifth element's value
				For i = LBound(A) To UBound(A)
					Debug.Print "A(" & i & ") = " & A(i)
				Next i
				
			CallByName
				Ejecuta un método de un objeto, o bien establece o devuelve una propiedad de un objeto.
				--
				Option Explicit

				Private Sub Form_Load()
					Label1.Caption = "Move"        ' Name of Move method.
				End Sub

				Private Sub Command1_Click()
					If Command1.Left <> 0 Then
						CallByName Command1, Label1.Caption, vbMethod, 0, 0
					Else
						CallByName Command1, Label1.Caption, vbMethod, 500, 500
					End If
				End Sub
				
			Choose
				Selecciona y devuelve un valor de una lista de argumentos.
				--
				Function GetChoice(Ind As Integer)
					GetChoice = Choose(Ind, "Speedy", "United", "Federal")
				End Function
				
			Command
			CreateObject
			CurDir
				Devuelve una Variant (String) que representa la ruta de acceso actual.
				
				' Assume current path on C drive is "C:\WINDOWS\SYSTEM" (on Microsoft Windows).
				' Assume current path on D drive is "D:\EXCEL".
				' Assume C is the current drive.
				Dim MyPath
				MyPath = CurDir    ' Returns "C:\WINDOWS\SYSTEM".
				MyPath = CurDir("C")    ' Returns "C:\WINDOWS\SYSTEM".
				MyPath = CurDir("D")    ' Returns "D:\EXCEL".
			
			Date
				Devuelve un Variant (Date) que contiene la fecha actual del sistema.
				--
				Dim MyDate
				MyDate = Date    ' MyDate contains the current system date.

			DateAdd	
				Devuelve un valor Variant (Date) que contiene una fecha a la que se ha agregado un intervalo de tiempo especificado.
				El argumento intervalo tiene los siguientes valores:
				Configuración	Descripción
				yyyy			Año
				q				Trimestre
				m				Mes
				y				Día del año
				d				Día
				w				Día de la semana
				ww				Semana
				h				Hora
				n				Minuto
				s				Segundo
				--
				Dim FirstDate As Date    ' Declare variables.
				Dim IntervalType As String
				Dim Number As Integer
				Dim Msg As String
				IntervalType = "m"    ' "m" specifies months as interval.
				FirstDate = InputBox("Enter a date")
				Number = InputBox("Enter number of months to add")
				Msg = "New date: " & DateAdd(IntervalType, Number, FirstDate)
				MsgBox Msg

			DateDiff
				Devuelve un valor Variant (Long) que especifica el número de intervalos de tiempo entre dos fechas especificadas.
				--
				Dim TheDate As Date    ' Declare variables.
				Dim Msg
				TheDate = InputBox("Enter a date")
				Msg = "Days from today: " & DateDiff("d", Now, TheDate)
				MsgBox Msg

			DatePart
			DateSerial
			DateValue
			Day
			DDB
			Dir
			DoEvents
			Environ
			EOF
			Error
			FileAttr
			FileDateTime
			FileLen
			Filter
			FormatCurrency
			FormatDateTime
			FormatNumber
			FormatPercent
			FreeFile
			FV
			GetAllSettings
			GetAttr
			GetObject
			GetSetting
			Hour
			IIf
			IMEStatus
			Input
			InputBox
			InStr
				Dim SearchString, SearchChar, MyPos
				SearchString ="XXpXXpXXPXXP"    ' String to search in.
				SearchChar = "P"    ' Search for "P".

				' A textual comparison starting at position 4. Returns 6.
				MyPos = Instr(4, SearchString, SearchChar, 1)    

				' A binary comparison starting at position 1. Returns 9.
				MyPos = Instr(1, SearchString, SearchChar, 0)

				' Comparison is binary by default (last argument is omitted).
				MyPos = Instr(SearchString, SearchChar)    ' Returns 9.

				MyPos = Instr(1, SearchString, "W")    ' Returns 0.
			InStrRev
			IPmt
			IRR
			IsArray
			IsDate
			IsEmpty
			IsError
			IsMissing
			IsNull
			IsNumeric
			IsObject
			Join
			LBound
			LCase
			Left
			Len
			Loc
			LOF
			LTrim, RTrim y Trim
			MacID
			MacScript
			Mid
			Minute
			MIRR
			Month
			MonthName
			MsgBox
			Now
			NPer
			NPV
			Partition
			Pmt
			PPmt
			PV
			QBColor
			Rate
			Replace
			RGB
			Right
			Round
			Second
			Seek
			Shell
			SLN
			Space
			Spc
			Split
			StrComp
			StrConv
			String
			StrReverse
			Switch
			SYD
			Tab
			Time
			Timer
			TimeSerial
			TimeValue
			TypeName
			UBound
			UCase
			VarType
			Weekday
			WeekdayName
			Year


00.- Rutina de busqueda múltiple
		Sub Busqueda_Multiple()
		'
		' Busqueda_Multiple Macro
		'

		'
			Range("G2:K2").Select
			Range(Selection, Selection.End(xlDown)).Select
			Dim bFound As Boolean
			Dim res As Range
			Dim WhatToFind As Variant
			Dim I As Integer
			Dim LastRow As Integer
			'
			'   Iniciación variables
			'
			bFound = False
			WhatToFind = 54
			LastRow = 0
			Set res = Selection.Find(What:=WhatToFind, LookIn:=xlValues, LookAt:=xlWhole)
			If Not res Is Nothing Then
				Do
					I = I + 1
					Debug.Print "(" & CStr(I) & ")=>" & res.Address & " Fila: " & res.Row
					LastRow = res.Row
					Set res = Selection.FindNext(res)
					'
					'	Al llegar al final empieza por el principio
					'
					If res.Row <= LastRow Then
						bFound = True
					End If
				Loop While Not bFound
			End If
			Debug.Print Now
		End Sub







EOF File: Code_Snippets_LotExcel.txt